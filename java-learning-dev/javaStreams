import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        // Example of intermediate operations: filter, map, distinct, sorted
        List<Integer> evenSquares = numbers.stream()
                .filter(n -> n % 2 == 0) // Keep only even numbers
                .map(n -> n * n) // Square the numbers
                .distinct() // Remove duplicates
                .sorted() // Sort the numbers in ascending order
                .collect(Collectors.toList());

        System.out.println("Even Squares: " + evenSquares);

        // Example of terminal operations: forEach, reduce, count
        int sum = numbers.stream()
                .filter(n -> n % 2 == 0) // Keep only even numbers
                .reduce(0, Integer::sum); // Sum the numbers using reduction

        long count = numbers.stream()
                .filter(n -> n % 2 == 1) // Keep only odd numbers
                .count(); // Count the number of odd numbers

        System.out.println("Sum of even numbers: " + sum);
        System.out.println("Count of odd numbers: " + count);

        // Example of parallel stream
        List<String> words = Arrays.asList("Java", "Stream", "API", "Parallel", "Processing");
        String concatenatedString = words.parallelStream()
                .map(String::toUpperCase) // Convert to uppercase
                .sorted() // Sort the words
                .reduce("", String::concat); // Concatenate the words

        System.out.println("Concatenated String: " + concatenatedString);
    }
}
